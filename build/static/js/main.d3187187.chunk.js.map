{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["cancel","actions","say","text","send","_context","type","value","listen","promptAndAsk","prompt","speechprompt","helpmes","initial","states","entry","on","ENDSPEECH","hist","maxspeech","ask","delay","id","help","nomatch","helpm","speech","grammar","person","day","time","grammar2","commands","grammar3","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","assign","option","MAXSPEECH","query","invoke","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","todo","timer","appointment","who","wholeday","notime","whattime","withtime","Finished","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.d3187187.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel}=actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string, speechprompt:string, helpmes:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n            maxspeech: {\n                entry: say(speechprompt),\n             on: {ENDSPEECH: \"ask\"}\n            \n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n            },\n            help: {entry: say(helpmes),\n                on: {ENDSPEECH: \"hist\" }\n            },\n            nomatch: {\n                entry: say(\"Sorry, please say your English in a clear way\"),\n                on: { ENDSPEECH:  \"prompt\" }\n            \n            }\n        }})\n}\n\n\nfunction helpm(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n\t\"Chris\": { person: \"Chris Thomas\" },\n\t\"Grace\": {person: \"Grace Jane\"},\n    \"on Friday\": { day: \"Friday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"Friday\": { day: \"Friday\" },\n\t\"on Monday\": { day: \"Monday\" },\n\t\"at8\": {time: \"eight o'clock\" },\n\t\"at eight\": { time: \"eight o'clcok\" },\n    \"at 8\": { time: \"eight o'clcok\" },\n\t\"at10\":{time:\"ten o'clcok\" },\n    \"at ten\": { time: \"ten o'clcok\" },\n\t\"at7\": {time: \"seven o'clock\"},\n    \"at 7\": {time: \"seven o'clock\"},\n    \"at 10\": {time: \"seven o'clock\"},\n    \"at 11\": {time: \"eleven o'clock\"},\n    \"at seven\": {time: \"seven o'clock\"},\n\t\"at11\": {time: \"eleven o'clock\"},\n    \"at eleven\": {time: \"eleven o'clock\"}\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n\t\t\t\t  \"No\": false,\n\t\t\t\t  \"no\" : false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                    \n                },\n                {target: \".help\",\n                cond: (context) => context.recResult in commands }],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            \n        ...promptAndAsk(\"What would you like to do?\", \n        \"You did not respond，just tell me what you want to do\", \"Please kindly tell me what you want to do\")\n    }, \n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand，you want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { person: grammar[context.recResult].person } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n             ...promptAndAsk(\"Who are you meeting with?\", \"You did not respond, which person\", \"Just tell me the name\")\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: [assign((context) => { return { day: grammar[context.recResult].day } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in commands),\n                actions: cancel(\"maxsp\")},\n                {target: \".help\",\n                cond: (context) => context.recResult in commands}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"You did not respond, say a day\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            },\n                help:{\n                  ...helpm(\"Just tell me the day\")\n               }, \t     \n            }\n        },\n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t            },\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \".help\",\n                    cond: (context) => context.recResult in commands}],\n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n                    hist: {type: \"history\"},\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t            },\n                    maxspeech: {\n                      ...speech(\"You did not respond, say a decision\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            },\n                   help:{\n                      ...helpm(\"Just tell me the decision\")\n                   }\n\t\t        }\t     \n            },\n            \n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\",\n                           actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\",\n\t\t\t\t\t\t   actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t                },\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \".help\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n                        hist: {type: \"history\"},\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t                },\n                        maxspeech: {\n                             ...speech(\"You did not respond, please confirm it\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                },\n                        \n                    help:{...helpm(\"Just confirm it\")}\n                        \n                    }\n\t            },\n\t\t\t\twhattime: {\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: [assign((context) => { return { time: grammar[context.recResult].time } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \".help\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\t\n            ...promptAndAsk(\"What time is your meeting\", \n            \"You did not respond, say the time\", \"Please kindly tell me the time\")\n\t\t},      \n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n                 hist: {type: \"history\"},\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t },\n                maxspeech: {\n                 ...speech(\"You did not respond, just confirm it\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t },\n                 help:{\n                    ...helpm(\"Please confirm it\")\n                }\n\t\t\t }\n\t\t},\n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        MAXSPEECH: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}