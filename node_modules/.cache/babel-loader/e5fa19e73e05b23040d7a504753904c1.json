{"ast":null,"code":"import _objectSpread from \"/home/hanzhe/lab4_part2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport \"./styles.scss\";\nconst cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt, speechprompt, helpmes) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      hist: {\n        type: \"history\"\n      },\n      maxspeech: {\n        entry: say(speechprompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      ask: {\n        entry: [listen(), send('MAXSPEECH', {\n          delay: 5000,\n          id: \"maxsp\"\n        })]\n      },\n      help: {\n        entry: say(helpmes),\n        on: {\n          ENDSPEECH: \"hist\"\n        }\n      },\n      nomatch: {\n        entry: say(\"Sorry, please say your English in a clear way\"),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      }\n    }\n  };\n}\n\nfunction helpm(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"hist\"\n    }\n  };\n}\n\nfunction speech(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"ask\"\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Chris\": {\n    person: \"Chris Thomas\"\n  },\n  \"Grace\": {\n    person: \"Grace Jane\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"at8\": {\n    time: \"eight o'clock\"\n  },\n  \"at eight\": {\n    time: \"eight o'clcok\"\n  },\n  \"at 8\": {\n    time: \"eight o'clcok\"\n  },\n  \"at10\": {\n    time: \"ten o'clcok\"\n  },\n  \"at ten\": {\n    time: \"ten o'clcok\"\n  },\n  \"at7\": {\n    time: \"seven o'clock\"\n  },\n  \"at 7\": {\n    time: \"seven o'clock\"\n  },\n  \"at 10\": {\n    time: \"seven o'clock\"\n  },\n  \"at 11\": {\n    time: \"eleven o'clock\"\n  },\n  \"at seven\": {\n    time: \"seven o'clock\"\n  },\n  \"at11\": {\n    time: \"eleven o'clock\"\n  },\n  \"at eleven\": {\n    time: \"eleven o'clock\"\n  }\n};\nconst grammar2 = {\n  \"yes\": true,\n  \"Yes\": true,\n  \"Of course\": true,\n  \"of course\": true,\n  \"No\": false,\n  \"no\": false,\n  \"No way\": false,\n  \"no way\": false\n};\nconst commands = {\n  \"help\": \"h\",\n  \"Help\": \"H\"\n};\nconst grammar3 = {\n  \"count\": 0\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"query\",\n          cond: context => !(context.recResult in commands),\n          actions: [assign(context => {\n            return {\n              option: context.recResult\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          })]\n        }, {\n          target: \".help\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"What would you like to do?\", \"You did not respondï¼Œjust tell me what you want to do\", \"Please kindly tell me what you want to do\")),\n    query: {\n      invoke: {\n        id: \"rasa\",\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: \"menu\",\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: \"welcome\",\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: \"todo\",\n          cond: context => context.option === \"todo\"\n        }, {\n          target: \"timer\",\n          cond: context => context.option === \"timer\"\n        }, {\n          target: \"appointment\",\n          cond: context => context.option === \"appointment\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. I understand\\uFF0Cyou want a \".concat(context.option, \".\")\n          }))\n        }\n        /*            nomatch: {\n                       entry: say(\"Sorry, I don\"t understand\"),\n                       on: { ENDSPEECH: \"prompt\" }\n           } */\n\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a to do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create an appointment\"\n          }))\n        }\n      }\n    },\n    who: _objectSpread({\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"day\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"Who are you meeting with?\", \"You did not respond, which person\", \"Just tell me the name\")),\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, say a day\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know which day are you talking about\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: _objectSpread({}, helpm(\"Just tell me the day\"))\n      }\n    },\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"notime\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"whattime\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good.on \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, say a decision\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: _objectSpread({}, helpm(\"Just tell me the decision\"))\n      }\n    },\n    notime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \"for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, please confirm it\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: _objectSpread({}, helpm(\"Just confirm it\"))\n      }\n    },\n    whattime: _objectSpread({\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          })],\n          target: \"withtime\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"What time is your meeting\", \"You did not respond, say the time\", \"Please kindly tell me the time\")),\n    withtime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\",\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, just confirm it\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        },\n        help: _objectSpread({}, helpm(\"Please confirm it\"))\n      }\n    },\n    Finished: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};\n/* RASA API\n*  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\";\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: \"POST\",\n  headers: {\n    \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\"\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["/home/hanzhe/lab4_part2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","speechprompt","helpmes","initial","states","entry","on","ENDSPEECH","hist","maxspeech","ask","delay","id","help","nomatch","helpm","speech","grammar","person","day","time","grammar2","commands","grammar3","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","query","invoke","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","todo","timer","appointment","who","wholeday","notime","whattime","withtime","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel}=actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string, speechprompt:string, helpmes:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n            maxspeech: {\n                entry: say(speechprompt),\n             on: {ENDSPEECH: \"ask\"}\n            \n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n            },\n            help: {entry: say(helpmes),\n                on: {ENDSPEECH: \"hist\" }\n            },\n            nomatch: {\n                entry: say(\"Sorry, please say your English in a clear way\"),\n                on: { ENDSPEECH:  \"prompt\" }\n            \n            }\n        }})\n}\n\n\nfunction helpm(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n\t\"Chris\": { person: \"Chris Thomas\" },\n\t\"Grace\": {person: \"Grace Jane\"},\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Monday\": { day: \"Monday\" },\n\t\"at8\": {time: \"eight o'clock\" },\n\t\"at eight\": { time: \"eight o'clcok\" },\n    \"at 8\": { time: \"eight o'clcok\" },\n\t\"at10\":{time:\"ten o'clcok\" },\n    \"at ten\": { time: \"ten o'clcok\" },\n\t\"at7\": {time: \"seven o'clock\"},\n    \"at 7\": {time: \"seven o'clock\"},\n    \"at 10\": {time: \"seven o'clock\"},\n    \"at 11\": {time: \"eleven o'clock\"},\n    \"at seven\": {time: \"seven o'clock\"},\n\t\"at11\": {time: \"eleven o'clock\"},\n    \"at eleven\": {time: \"eleven o'clock\"}\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n\t\t\t\t  \"No\": false,\n\t\t\t\t  \"no\" : false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0})],\n                    \n                },\n                {target: \".help\",\n                cond: (context) => context.recResult in commands }],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            \n        ...promptAndAsk(\"What would you like to do?\", \n        \"You did not respondï¼Œjust tell me what you want to do\", \"Please kindly tell me what you want to do\")\n    }, \n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understandï¼Œyou want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { person: grammar[context.recResult].person } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n             ...promptAndAsk(\"Who are you meeting with?\", \"You did not respond, which person\", \"Just tell me the name\")\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: [assign((context) => { return { day: grammar[context.recResult].day } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in commands),\n                actions: cancel(\"maxsp\")},\n                {target: \".help\",\n                cond: (context) => context.recResult in commands}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"You did not respond, say a day\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            },\n                help:{\n                  ...helpm(\"Just tell me the day\")\n               }, \t     \n            }\n        },\n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t            },\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \".help\",\n                    cond: (context) => context.recResult in commands}],\n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n                    hist: {type: \"history\"},\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t            },\n                    maxspeech: {\n                      ...speech(\"You did not respond, say a decision\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            },\n                   help:{\n                      ...helpm(\"Just tell me the decision\")\n                   }\n\t\t        }\t     \n            },\n            \n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\",\n                           actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\",\n\t\t\t\t\t\t   actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t                },\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \".help\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n                        hist: {type: \"history\"},\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t                },\n                        maxspeech: {\n                             ...speech(\"You did not respond, please confirm it\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                },\n                        \n                    help:{...helpm(\"Just confirm it\")}\n                        \n                    }\n\t            },\n\t\t\t\twhattime: {\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: [assign((context) => { return { time: grammar[context.recResult].time } }),assign((context) => { grammar3[\"count\"]=0})],\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \".help\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\t\n            ...promptAndAsk(\"What time is your meeting\", \n            \"You did not respond, say the time\", \"Please kindly tell me the time\")\n\t\t},      \n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\",\n                    actions: assign((context) => { grammar3[\"count\"]=0})},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n                 hist: {type: \"history\"},\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t },\n                maxspeech: {\n                 ...speech(\"You did not respond, just confirm it\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t },\n                 help:{\n                    ...helpm(\"Please confirm it\")\n                }\n\t\t\t }\n\t\t},\n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n"]},"metadata":{},"sourceType":"module"}