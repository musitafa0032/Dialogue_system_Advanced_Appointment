{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["cancel","actions","say","text","send","_context","type","value","listen","helpm","prompt","name","entry","on","ENDSPEECH","speech","grammar","person","day","time","grammar2","commands","grammar3","dmMachine","initial","states","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","assign","option","MAXSPEECH","hist","maxspeech","ask","delay","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","todo","timer","appointment","who","nomatch","help2","help3","wholeday","help4","notime","help5","whattime","help6","withtime","help7","Finished","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.ba46a6d7.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel}=actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string, speechprompt:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n            maxspeech: {\n                ...speech(speechprompt)\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            },\n        }})\n}\n\n\nfunction helpm(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n\t\"Chris\": { person: \"Chris Thomas\" },\n\t\"Grace\": {person: \"Grace Jane\"},\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Monday\": { day: \"Monday\" },\n\t\"at8\": {time: \"eight o'clock\" },\n\t\"at eight\": { time: \"eight o'clcok\" },\n\t\"at10\":{time:\"ten o'clcok\" },\n    \"at ten\": { time: \"ten o'clcok\" },\n\t\"at7\": {time: \"seven o'clock\"},\n    \"at seven\": {time: \"seven o'clock\"},\n\t\"at11\": {time: \"eleven o'clock\"},\n    \"at eleven\": {time: \"eleven o'clock\"}\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n\t\t\t\t  \"No\": false,\n\t\t\t\t  \"no\" : false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0})],\n                    \n                },\n                {target: \"help1\",\n                cond: (context) => context.recResult in commands }],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            states: {        \n                prompt: {\n                entry: say(\"What would you like to do?\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n               maxspeech: {\n                ...speech(\"You did not respond，just tell me what you want to do\")\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            }\n        }   \n    }, \n    \n        help1:{\n            ...helpm(\"Please kindly tell me what you want to do\",\"welcome\")\n        },\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand，you want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { person: grammar[context.recResult].person } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help2\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n                },\n                maxspeech: {\n                    ...speech(\"You did not respond, just tell me the person\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n        help2:{\n            ...helpm(\"Just tell me the name\",\"who\")\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: [assign((context) => { return { day: grammar[context.recResult].day } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"help3\",\n                cond: (context) => context.recResult in commands}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"You did not respond, say a day\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n        help3:{\n            ...helpm(\"Just tell me the day\",\"day\")\n        },\n        \n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t            },\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"help4\",\n                    cond: (context) => context.recResult in commands}],\n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n                    hist: {type: \"history\"},\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t            },\n                    maxspeech: {\n                      ...speech(\"You did not respond, say a decision\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            help4:{\n                ...helpm(\"Just tell me the decision\",\"wholeday\")\n            },\n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\",\n                           actions: assign((context) => { grammar3[\"count\"]=0})},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\",\n\t\t\t\t\t\t   actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t                },\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help5\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n                        hist: {type: \"history\"},\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t                },\n                        maxspeech: {\n                             ...speech(\"You did not respond, please confirm it\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n                help5:{\n                    ...helpm(\"Just confirm it\",\"notime\")\n                },\n\t\t\t\twhattime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: [assign((context) => { return { time: grammar[context.recResult].time } }),assign((context) => { grammar3[\"count\"]=0})],\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help6\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n                    hist: {type: \"history\"},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t},\n                maxspeech: {\n                  ...speech(\"You did not respond, say a time\")\n                },\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n        help6:{\n            ...helpm(\"Just tell me the time\",\"whattime\")\n        },\n        \n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\",\n                    actions: assign((context) => { grammar3[\"count\"]=0})},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help7\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n                 hist: {type: \"history\"},\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t },\n                maxspeech: {\n                 ...speech(\"You did not respond, just confirm it\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n        help7:{\n            ...helpm(\"Please confirm it\",\"withtime\")\n        },\n        \n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        MAXSPEECH: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}