{"ast":null,"code":"import _objectSpread from \"/home/hanzhe/lab4_part2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      ask: {\n        entry: [listen(), send('MAXSPEECH', {\n          delay: 5000\n        })]\n      }\n    }\n  };\n}\n\nfunction helpm(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"his\"\n    }\n  };\n}\n\nfunction speech(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"ask\"\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Chris\": {\n    person: \"Chris Thomas\"\n  },\n  \"Grace\": {\n    person: \"Grace Jane\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"at8\": {\n    time: \"eight o'clock\"\n  },\n  \"at eight\": {\n    time: \"eight o'clcok\"\n  },\n  \"at10\": {\n    time: \"ten o'clcok\"\n  },\n  \"at ten\": {\n    time: \"ten o'clcok\"\n  },\n  \"at7\": {\n    time: \"seven o'clock\"\n  },\n  \"at seven\": {\n    time: \"seven o'clock\"\n  },\n  \"at11\": {\n    time: \"eleven o'clock\"\n  },\n  \"at eleven\": {\n    time: \"eleven o'clock\"\n  }\n};\nconst grammar2 = {\n  \"yes\": true,\n  \"Yes\": true,\n  \"Of course\": true,\n  \"of course\": true,\n  \"No\": false,\n  \"no\": false,\n  \"No way\": false,\n  \"no way\": false\n};\nconst commands = {\n  \"help\": \"h\",\n  \"Help\": \"H\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      context: {\n        count: 0\n      },\n      on: {\n        RECOGNISED: {\n          target: \"query\",\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        },\n        // {target: \"help1\",\n        // cond: (context) => context.recResult in commands }\n        MAXSPEECH: \"welcome.maxspeech1\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        maxspeech1: {\n          entry: say(\"You did not respond\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        }\n      }\n    },\n    help1: _objectSpread({}, helpm(\"Just tell me what you want to do\")),\n    query: {\n      invoke: {\n        id: \"rasa\",\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: \"menu\",\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: \"welcome\",\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    his: {\n      type: \"history\"\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: \"todo\",\n          cond: context => context.option === \"todo\"\n        }, {\n          target: \"timer\",\n          cond: context => context.option === \"timer\"\n        }, {\n          target: \"appointment\",\n          cond: context => context.option === \"appointment\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. I understand\\uFF0Cyou want a \".concat(context.option, \".\")\n          }))\n        }\n        /*            nomatch: {\n                       entry: say(\"Sorry, I don\"t understand\"),\n                       on: { ENDSPEECH: \"prompt\" }\n           } */\n\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a to do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create an appointment\"\n          }))\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      context: {\n        count: 0\n      },\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }, {\n          target: \"help2\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"who.maxspeech2\",\n          actions: assign({\n            count: context => context.count + 1\n          })\n        }, {\n          target: \"welcome\",\n          cond: context => context.count > 2\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        },\n        maxspeech2: _objectSpread({}, speech(\"You did not respond, just tell me the person\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help2: _objectSpread({}, helpm(\"Just tell me the name\")),\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\"\n        }, {\n          target: \"help3\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: \"day.maxspeech3\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        },\n        maxspeech3: _objectSpread({}, speech(\"You did not respond, say a day\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know which day are you talking about\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help3: _objectSpread({}, helpm(\"Just tell me the day\")),\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"notime\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"whattime\"\n        }, {\n          target: \".nomatch\"\n        }, {\n          target: \"help4\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: \"wholeday.maxspeech4\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good.on \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        },\n        maxspeech4: _objectSpread({}, speech(\"You did not respond, say a decision\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help4: _objectSpread({}, helpm(\"Just tell me the decision\")),\n    notime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }, {\n          target: \"help5\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: \"notime.maxspeech5\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \"for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        },\n        maxspeech5: _objectSpread({}, speech(\"You did not respond, please confirm it\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help5: _objectSpread({}, helpm(\"Just confirm it\")),\n    whattime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"withtime\"\n        }, {\n          target: \".nomatch\"\n        }, {\n          target: \"help6\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: \"whattime.maxspeech6\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        },\n        maxspeech6: _objectSpread({}, speech(\"You did not respond, say a time\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help6: _objectSpread({}, helpm(\"Just tell me the time\")),\n    withtime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }, {\n          target: \"help7\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: \"withtime.maxspeech7\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        },\n        maxspeech7: _objectSpread({}, speech(\"You did not respond, just confirm it\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help7: _objectSpread({}, helpm(\"Please confirm it\")),\n    Finished: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};\n/* RASA API\n*  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\";\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: \"POST\",\n  headers: {\n    \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\"\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["/home/hanzhe/lab4_part2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","helpm","speech","grammar","person","day","time","grammar2","commands","dmMachine","init","CLICK","welcome","context","count","RECOGNISED","target","actions","option","recResult","MAXSPEECH","maxspeech1","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","his","menu","cond","todo","timer","appointment","who","maxspeech2","nomatch","help2","maxspeech3","help3","wholeday","maxspeech4","help4","notime","maxspeech5","help5","whattime","maxspeech6","help6","withtime","maxspeech7","help7","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            },\n        }})\n}\n\n\nfunction helpm(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"his\"}})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"}})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n\t\"Chris\": { person: \"Chris Thomas\" },\n\t\"Grace\": {person: \"Grace Jane\"},\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Monday\": { day: \"Monday\" },\n\t\"at8\": {time: \"eight o'clock\" },\n\t\"at eight\": { time: \"eight o'clcok\" },\n\t\"at10\":{time:\"ten o'clcok\" },\n    \"at ten\": { time: \"ten o'clcok\" },\n\t\"at7\": {time: \"seven o'clock\"},\n    \"at seven\": {time: \"seven o'clock\"},\n\t\"at11\": {time: \"eleven o'clock\"},\n    \"at eleven\": {time: \"eleven o'clock\"}\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n\t\t\t\t  \"No\": false,\n\t\t\t\t  \"no\" : false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n\t    context: {count:0},\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                },\n                // {target: \"help1\",\n                // cond: (context) => context.recResult in commands }\n            \n                MAXSPEECH: \"welcome.maxspeech1\"\n            },\n            states: {        \n                prompt: {\n                entry: say(\"What would you like to do?\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n               maxspeech1: {\n                entry: say(\"You did not respond\"),\n                on: {ENDSPEECH: \"ask\"}\n            },   \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            }\n        }   \n    }, \n    \n        help1:{\n            ...helpm(\"Just tell me what you want to do\")\n        },\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n        his: {type : \"history\"\n        },\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand，you want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            context: {count : 0},\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" },\n                 {target: \"help2\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\"who.maxspeech2\",\n                 actions: assign({ count: context => context.count + 1 })\n                },\n            {target: \"welcome\",\n            cond: (context) => context.count >2}]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n                },\n                maxspeech2: {\n                    ...speech(\"You did not respond, just tell me the person\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        help2:{\n            ...helpm(\"Just tell me the name\")\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" },\n                {target: \"help3\",\n                cond: (context) => context.recResult in commands}],\n                MAXSPEECH: \"day.maxspeech3\" \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n\t            },\n                maxspeech3: {\n                 ...speech(\"You did not respond, say a day\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n        help3:{\n            ...helpm(\"Just tell me the day\")\n        },\n        \n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\"},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\"\n\n\t\t            },\n\t                { target: \".nomatch\" },\n                    {target: \"help4\",\n                    cond: (context) => context.recResult in commands}],\n                    MAXSPEECH: \"wholeday.maxspeech4\"\n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n\t\t            },\n                    maxspeech4: {\n                      ...speech(\"You did not respond, say a decision\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            help4:{\n                ...helpm(\"Just tell me the decision\")\n            },\n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"\n\t\t\t\t\t\t   \n\t\t                },\n\t\t                { target: \".nomatch\" },\n                        {target: \"help5\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: \"notime.maxspeech5\"\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n\t\t                },\n                        maxspeech5: {\n                             ...speech(\"You did not respond, please confirm it\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n                help5:{\n                    ...helpm(\"Just confirm it\")\n                },\n\t\t\t\twhattime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" },\n                        {target: \"help6\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: \"whattime.maxspeech6\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 5000})]\n\t\t\t\t},\n                maxspeech6: {\n                  ...speech(\"You did not respond, say a time\")\n                },\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n        help6:{\n            ...helpm(\"Just tell me the time\")\n        },\n        \n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\" },\n                 {target: \"help7\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: \"withtime.maxspeech7\"\n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n\t\t\t\t },\n                maxspeech7: {\n                 ...speech(\"You did not respond, just confirm it\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n        help7:{\n            ...helpm(\"Please confirm it\")\n        },\n        \n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n"]},"metadata":{},"sourceType":"module"}